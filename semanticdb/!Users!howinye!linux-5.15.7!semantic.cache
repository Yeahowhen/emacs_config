;; Object semanticdb-project-database-file-4576b8d4
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-4576b8d4"
  :tables
  (list
    (semanticdb-table "semanticdb-table-54c66032"
      :major-mode makefile-bsdmake-mode
      :tags 
        '( ("VERSION" variable (:default-value ("5")) nil [36 48])
            ("PATCHLEVEL" variable (:default-value ("15")) nil [48 64])
            ("SUBLEVEL" variable (:default-value ("7")) nil [64 77])
            ("EXTRAVERSION" variable nil nil [77 92])
            ("NAME" variable (:default-value ("Trick" "or" "Treat")) nil [92 114])
            ("PHONY" variable (:default-value ("__all")) nil [527 542])
            ("__all" function nil nil [542 549])
            ("MAKEFLAGS" variable (:default-value ("-rR")) nil [1428 1445])
            ("LC_COLLATE" variable (:default-value ("C")) nil [1503 1516])
            ("LC_NUMERIC" variable (:default-value ("C")) nil [1516 1529])
            ("KBUILD_EXTMOD" variable (:default-value ("$(shell dirname $(KBUILD_EXTMOD).)")) nil [4051 4103])
            ("abs_objtree" variable (:default-value ("$(shell mkdir -p $(KBUILD_OUTPUT) && cd $(KBUILD_OUTPUT) && pwd)")) nil [5068 5148])
            ("abs_objtree" variable (:default-value ("$(realpath $(abs_objtree))")) nil [5277 5319])
            ("abs_objtree" variable (:default-value ("$(CURDIR)")) nil [5324 5349])
            ("MAKEFLAGS" variable (:default-value ("--no-print-directory")) nil [5495 5529])
            ("need-sub-make" variable (:default-value ("1")) nil [5534 5553])
            ("this-makefile" variable (:default-value ("$(lastword $(MAKEFILE_LIST))")) nil [5560 5606])
            ("abs_srctree" variable (:default-value ("$(realpath $(dir $(this-makefile)))")) nil [5606 5657])
            ("MAKEFLAGS" variable (:default-value ("--include-dir=$(abs_srctree)")) nil [6030 6072])
            ("need-sub-make" variable (:default-value ("1")) nil [6268 6287])
            ("$(this-makefile)" function (:arguments (";")) nil [6330 6350])
            ("sub_make_done" function (:arguments ("=" "1")) nil [6388 6414])
            ("export" function (:arguments ("=" "1")) nil [6388 6414])
            ("PHONY" variable (:default-value ("$(MAKECMDGOALS)" "__sub-make")) nil [6442 6478])
            ("__all" function (:arguments ("__sub-make")) nil [6479 6549])
            ("$(filter-out $(this-makefile), $(MAKECMDGOALS))" function (:arguments ("__sub-make")) nil [6479 6549])
            ("__sub-make" function nil nil [6625 6711])
            ("MAKEFLAGS" variable (:default-value ("--no-print-directory")) nil [7034 7068])
            ("srctree" variable (:default-value ("$(abs_srctree)")) nil [7482 7508])
            ("objtree" variable (:default-value (".")) nil [7515 7529])
            ("VPATH" variable (:default-value ("$(srctree)")) nil [7529 7550])
            ("version_h" variable (:default-value ("include/generated/uapi/linux/version.h")) nil [8037 8089])
            ("clean-targets" variable (:default-value ("%clean" "mrproper" "cleandocs")) nil [8090 8133])
            ("no-dot-config-targets" variable (:default-value ("$(clean-targets)" "cscope" "gtags" "TAGS" "tags" "help%" "%docs" "check%" "coccicheck" "$(version_h)" "headers" "headers_%" "archheaders" "archscripts" "%asm-generic" "kernelversion" "%src-pkg" "dt_binding_check" "outputmakefile")) nil [8133 8375])
            ("no-compiler-targets" variable (:default-value ("$(no-dot-config-targets)" "install" "dtbs_install" "headers_install" "modules_install" "kernelrelease" "image_name")) nil [8531 8662])
            ("no-sync-config-targets" variable (:default-value ("$(no-dot-config-targets)" "%install" "kernelrelease" "image_name")) nil [8662 8754])
            ("single-targets" variable (:default-value ("%.a" "%.i" "%.ko" "%.lds" "%.ll" "%.lst" "%.mod" "%.o" "%.s" "%.symtypes" "%/")) nil [8754 8830])
            ("config-build" variable nil nil [8831 8847])
            ("mixed-build" variable nil nil [8847 8862])
            ("need-config" variable (:default-value ("1")) nil [8862 8879])
            ("need-compiler" variable (:default-value ("1")) nil [8879 8898])
            ("may-sync-config" variable (:default-value ("1")) nil [8898 8919])
            ("single-build" variable nil nil [8919 8935])
            ("PHONY" variable (:default-value ("$(MAKECMDGOALS)" "__build_one_by_one")) nil [10518 10562])
            ("$(MAKECMDGOALS)" function (:arguments ("__build_one_by_one")) nil [10563 10603])
            ("__build_one_by_one" function nil nil [10604 10717])
            ("$(srctree)/scripts/Kbuild.include" include nil nil [10739 10781])
            ("KERNELRELEASE" variable (:default-value ("$(shell cat include/config/kernel.release 2> /dev/null)")) nil [10853 10925])
            ("KERNELVERSION" variable (:default-value ("$(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$(EXTRAVERSION)")) nil [10925 11031])
            ("$(srctree)/scripts/subarch.include" include nil nil [11095 11138])
            ("UTS_MACHINE" variable (:default-value ("$(ARCH)")) nil [12103 12127])
            ("SRCARCH" variable (:default-value ("$(ARCH)")) nil [12127 12147])
            ("cross_compiling" function (:arguments ("=")) nil [12522 12548])
            ("export" function (:arguments ("=")) nil [12522 12548])
            ("cross_compiling" variable (:default-value ("1")) nil [12578 12599])
            ("CONFIG_SHELL" variable (:default-value ("sh")) nil [12678 12697])
            ("HOST_LFS_CFLAGS" variable (:default-value ("$(shell getconf LFS_CFLAGS 2>/dev/null)")) nil [12698 12757])
            ("HOST_LFS_LDFLAGS" variable (:default-value ("$(shell getconf LFS_LDFLAGS 2>/dev/null)")) nil [12757 12818])
            ("HOST_LFS_LIBS" variable (:default-value ("$(shell getconf LFS_LIBS 2>/dev/null)")) nil [12818 12873])
            ("HOSTCC" variable (:default-value ("clang")) nil [12891 12906])
            ("HOSTCXX" variable (:default-value ("clang++")) nil [12906 12924])
            ("HOSTCC" variable (:default-value ("gcc")) nil [12929 12942])
            ("HOSTCXX" variable (:default-value ("g++")) nil [12942 12956])
            ("KBUILD_USERCFLAGS" function (:arguments ("=" "-Wall" "-Wmissing-prototypes" "-Wstrict-prototypes" "-O2" "-fomit-frame-pointer" "-std=gnu89")) nil [12963 13085])
            ("export" function (:arguments ("=" "-Wall" "-Wmissing-prototypes" "-Wstrict-prototypes" "-O2" "-fomit-frame-pointer" "-std=gnu89")) nil [12963 13085])
            ("KBUILD_USERLDFLAGS" function (:arguments ("=")) nil [13085 13114])
            ("export" function (:arguments ("=")) nil [13085 13114])
            ("KBUILD_HOSTCFLAGS" variable (:default-value ("$(KBUILD_USERCFLAGS)" "$(HOST_LFS_CFLAGS)" "$(HOSTCFLAGS)")) nil [13115 13192])
            ("KBUILD_HOSTCXXFLAGS" variable (:default-value ("-Wall" "-O2" "$(HOST_LFS_CFLAGS)" "$(HOSTCXXFLAGS)")) nil [13192 13260])
            ("KBUILD_HOSTLDFLAGS" variable (:default-value ("$(HOST_LFS_LDFLAGS)" "$(HOSTLDFLAGS)")) nil [13260 13318])
            ("KBUILD_HOSTLDLIBS" variable (:default-value ("$(HOST_LFS_LIBS)" "$(HOSTLDLIBS)")) nil [13318 13372])
            ("CPP" variable (:default-value ("$(CC)" "-E")) nil [13403 13419])
            ("CC" variable (:default-value ("clang")) nil [13436 13448])
            ("LD" variable (:default-value ("ld.lld")) nil [13448 13461])
            ("AR" variable (:default-value ("llvm-ar")) nil [13461 13475])
            ("NM" variable (:default-value ("llvm-nm")) nil [13475 13489])
            ("OBJCOPY" variable (:default-value ("llvm-objcopy")) nil [13489 13513])
            ("OBJDUMP" variable (:default-value ("llvm-objdump")) nil [13513 13537])
            ("READELF" variable (:default-value ("llvm-readelf")) nil [13537 13561])
            ("STRIP" variable (:default-value ("llvm-strip")) nil [13561 13581])
            ("CC" variable (:default-value ("$(CROSS_COMPILE)gcc")) nil [13586 13612])
            ("LD" variable (:default-value ("$(CROSS_COMPILE)ld")) nil [13612 13637])
            ("AR" variable (:default-value ("$(CROSS_COMPILE)ar")) nil [13637 13662])
            ("NM" variable (:default-value ("$(CROSS_COMPILE)nm")) nil [13662 13687])
            ("OBJCOPY" variable (:default-value ("$(CROSS_COMPILE)objcopy")) nil [13687 13722])
            ("OBJDUMP" variable (:default-value ("$(CROSS_COMPILE)objdump")) nil [13722 13757])
            ("READELF" variable (:default-value ("$(CROSS_COMPILE)readelf")) nil [13757 13792])
            ("STRIP" variable (:default-value ("$(CROSS_COMPILE)strip")) nil [13792 13823])
            ("PAHOLE" variable (:default-value ("pahole")) nil [13829 13846])
            ("RESOLVE_BTFIDS" variable (:default-value ("$(objtree)/tools/bpf/resolve_btfids/resolve_btfids")) nil [13846 13914])
            ("LEX" variable (:default-value ("flex")) nil [13914 13926])
            ("YACC" variable (:default-value ("bison")) nil [13926 13940])
            ("AWK" variable (:default-value ("awk")) nil [13940 13951])
            ("INSTALLKERNEL" variable (:default-value ("installkernel")) nil [13951 13983])
            ("DEPMOD" variable (:default-value ("depmod")) nil [13983 14000])
            ("PERL" variable (:default-value ("perl")) nil [14000 14013])
            ("PYTHON3" variable (:default-value ("python3")) nil [14013 14032])
            ("CHECK" variable (:default-value ("sparse")) nil [14032 14048])
            ("BASH" variable (:default-value ("bash")) nil [14048 14061])
            ("KGZIP" variable (:default-value ("gzip")) nil [14061 14075])
            ("KBZIP2" variable (:default-value ("bzip2")) nil [14075 14091])
            ("KLZOP" variable (:default-value ("lzop")) nil [14091 14105])
            ("LZMA" variable (:default-value ("lzma")) nil [14105 14118])
            ("LZ4" variable (:default-value ("lz4c")) nil [14118 14130])
            ("XZ" variable (:default-value ("xz")) nil [14130 14139])
            ("ZSTD" variable (:default-value ("zstd")) nil [14139 14152])
            ("CHECKFLAGS" variable (:default-value ("-D__linux__" "-Dlinux" "-D__STDC__" "-Dunix" "-D__unix__" "-Wbitwise" "-Wno-return-void" "-Wno-unknown-attribute" "$(CF)")) nil [14153 14282])
            ("NOSTDINC_FLAGS" variable nil nil [14282 14300])
            ("CFLAGS_MODULE" variable nil nil [14300 14318])
            ("AFLAGS_MODULE" variable nil nil [14318 14336])
            ("LDFLAGS_MODULE" variable nil nil [14336 14354])
            ("CFLAGS_KERNEL" variable nil nil [14354 14370])
            ("AFLAGS_KERNEL" variable nil nil [14370 14386])
            ("LDFLAGS_vmlinux" variable nil nil [14386 14404])
            ("USERINCLUDE" variable (:default-value ("-I$(srctree)/arch/$(SRCARCH)/include/uapi" "-I$(objtree)/arch/$(SRCARCH)/include/generated/uapi" "-I$(srctree)/include/uapi" "-I$(objtree)/include/generated/uapi" "-include" "$(srctree)/include/linux/compiler-version.h" "-include" "$(srctree)/include/linux/kconfig.h")) nil [14474 14797])
            ("LINUXINCLUDE" variable (:default-value ("-I$(srctree)/arch/$(SRCARCH)/include" "-I$(objtree)/arch/$(SRCARCH)/include/generated" "$(if $(building_out_of_srctree),-I$(srctree)/include)" "-I$(objtree)/include" "$(USERINCLUDE)")) nil [14910 15123])
            ("KBUILD_AFLAGS" variable (:default-value ("-D__ASSEMBLY__" "-fno-PIE")) nil [15124 15167])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wall" "-Wundef" "-Werror=strict-prototypes" "-Wno-trigraphs" "-fno-strict-aliasing" "-fno-common" "-fshort-wchar" "-fno-PIE" "-Werror=implicit-function-declaration" "-Werror=implicit-int" "-Werror=return-type" "-Wno-format-security" "-std=gnu89")) nil [15167 15436])
            ("KBUILD_CPPFLAGS" variable (:default-value ("-D__KERNEL__")) nil [15436 15468])
            ("KBUILD_AFLAGS_KERNEL" variable nil nil [15468 15492])
            ("KBUILD_CFLAGS_KERNEL" variable nil nil [15492 15516])
            ("KBUILD_AFLAGS_MODULE" variable (:default-value ("-DMODULE")) nil [15516 15550])
            ("KBUILD_CFLAGS_MODULE" variable (:default-value ("-DMODULE")) nil [15550 15584])
            ("KBUILD_LDFLAGS_MODULE" variable nil nil [15584 15609])
            ("KBUILD_LDFLAGS" variable nil nil [15609 15627])
            ("CLANG_FLAGS" variable nil nil [15627 15642])
            ("RCS_FIND_IGNORE" function (:arguments ("=" "\\( -name SCCS -o -name BitKeeper -o -name .svn -o    \\
			  -name CVS -o -name .pc -o -name .hg -o -name .git \\)" "-prune" "-o")) nil [16347 16503])
            ("export" function (:arguments ("=" "\\( -name SCCS -o -name BitKeeper -o -name .svn -o    \\
			  -name CVS -o -name .pc -o -name .hg -o -name .git \\)" "-prune" "-o")) nil [16347 16503])
            ("RCS_TAR_IGNORE" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [16503 16641])
            ("export" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [16503 16641])
            ("PHONY" variable (:default-value ("scripts_basic")) nil [16818 16841])
            ("scripts_basic" function nil nil [16841 16892])
            ("PHONY" variable (:default-value ("outputmakefile")) nil [16893 16917])
            ("quiet_cmd_makefile" variable (:default-value ("GEN" "Makefile")) nil [17292 17330])
            ("outputmakefile" function nil nil [17482 18019])
            ("CC_VERSION_TEXT" variable (:default-value ("$(subst $(pound),,$(shell LC_ALL=C $(CC) --version 2>/dev/null | head -n 1))")) nil [18314 18409])
            ("$(srctree)/scripts/Makefile.clang" include nil nil [18458 18500])
            ("$(srctree)/scripts/Makefile.compiler" include nil nil [18644 18689])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [19079 19123])
            ("config" function (:arguments ("outputmakefile" "scripts_basic" "FORCE")) nil [19179 19263])
            ("%config" function (:arguments ("outputmakefile" "scripts_basic" "FORCE")) nil [19264 19349])
            ("PHONY" variable (:default-value ("all")) nil [19699 19712])
            ("__all" function (:arguments ("all")) nil [19737 19748])
            ("__all" function (:arguments ("modules")) nil [19753 19768])
            ("KBUILD_MODULES" variable nil nil [19860 19878])
            ("KBUILD_BUILTIN" variable (:default-value ("1")) nil [19878 19898])
            ("include/config/auto.conf" include nil nil [20399 20432])
            ("core-y" variable (:default-value ("init/" "usr/" "arch/$(SRCARCH)/")) nil [20527 20566])
            ("drivers-y" variable (:default-value ("drivers/" "sound/")) nil [20566 20595])
            ("drivers-y" variable (:default-value ("virt/")) nil [20663 20682])
            ("libs-y" variable (:default-value ("lib/")) nil [20682 20698])
            ("all" function (:arguments ("vmlinux")) nil [20952 20965])
            ("CFLAGS_GCOV" variable (:default-value ("-fprofile-arcs" "-ftest-coverage")) nil [20966 21012])
            ("CFLAGS_GCOV" variable (:default-value ("-fno-tree-loop-im")) nil [21035 21068])
            ("RETPOLINE_CFLAGS" variable (:default-value ("$(call cc-option,-mindirect-branch=thunk-extern -mindirect-branch-register)")) nil [21258 21354])
            ("RETPOLINE_VDSO_CFLAGS" variable (:default-value ("$(call cc-option,-mindirect-branch=thunk-inline -mindirect-branch-register)")) nil [21354 21455])
            ("RETPOLINE_CFLAGS" variable (:default-value ("-mretpoline-external-thunk")) nil [21486 21533])
            ("RETPOLINE_VDSO_CFLAGS" variable (:default-value ("-mretpoline")) nil [21533 21570])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [21630 21674])
            ("include/config/auto.conf.cmd" include nil nil [21928 21965])
            ("$(KCONFIG_CONFIG)" function nil nil [21966 22228])
            ("%/config/auto.conf.cmd" function (:arguments ("$(KCONFIG_CONFIG)")) nil [22773 22933])
            ("%/config/auto.conf" function (:arguments ("$(KCONFIG_CONFIG)")) nil [22773 22933])
            ("PHONY" variable (:default-value ("include/config/auto.conf")) nil [23142 23176])
            ("include/config/auto.conf" function nil nil [23177 23529])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-delete-null-pointer-checks")) nil [23575 23624])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning,frame-address,)")) nil [23624 23683])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, format-truncation)")) nil [23683 23746])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, format-overflow)")) nil [23746 23807])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, address-of-packed-member)")) nil [23807 23877])
            ("KBUILD_CFLAGS" variable (:default-value ("-O2")) nil [23919 23940])
            ("KBUILD_CFLAGS" variable (:default-value ("-O3")) nil [23989 24010])
            ("KBUILD_CFLAGS" variable (:default-value ("-Os")) nil [24049 24070])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,--param=allow-store-data-races=0)")) nil [24256 24324])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-fno-allow-store-data-races)")) nil [24324 24387])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-reorder-blocks" "-fno-ipa-cp-clone" "-fno-partial-inlining")) nil [24641 24718])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wframe-larger-than=$(CONFIG_FRAME_WARN)")) nil [24756 24814])
            ("stackp-flags-y" variable (:default-value ("-fno-stack-protector")) nil [24821 24895])
            ("stackp-flags-" function (:arguments ("=" "-fstack-protector")) nil [24895 24966])
            ("stackp-flags-" function (:arguments ("=" "-fstack-protector-strong")) nil [24966 25044])
            ("KBUILD_CFLAGS" variable (:default-value ("$(stackp-flags-y)")) nil [25045 25080])
            ("KBUILD_CFLAGS" variable (:default-value ("$(KBUILD_CFLAGS-y)")) nil [25123 25159])
            ("KBUILD_CPPFLAGS" variable (:default-value ("-Qunused-arguments")) nil [25185 25223])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wno-gnu")) nil [25301 25327])
            ("KBUILD_CFLAGS" variable (:default-value ("-mno-global-merge")) nil [25514 25549])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Wimplicit-fallthrough=5,)")) nil [25751 25812])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wno-main")) nil [25868 25895])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, unused-but-set-variable)")) nil [26027 26096])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, unused-const-variable)")) nil [26096 26163])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")) nil [26191 26260])
            ("KBUILD_CFLAGS" variable (:default-value ("-fomit-frame-pointer")) nil [26628 26666])
            ("KBUILD_CFLAGS" variable (:default-value ("-ftrivial-auto-var-init=pattern")) nil [26769 26818])
            ("KBUILD_CFLAGS" variable (:default-value ("-ftrivial-auto-var-init=zero")) nil [27081 27127])
            ("KBUILD_CFLAGS" variable (:default-value ("-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang")) nil [27127 27217])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -fno-stack-clash-protection)")) nil [27367 27431])
            ("KBUILD_CFLAGS" variable (:default-value ("-fzero-call-used-regs=used-gpr")) nil [27544 27592])
            ("DEBUG_CFLAGS" variable nil nil [27599 27615])
            ("DEBUG_CFLAGS" variable (:default-value ("-gsplit-dwarf")) nil [27671 27701])
            ("DEBUG_CFLAGS" variable (:default-value ("-g")) nil [27706 27725])
            ("KBUILD_AFLAGS" variable (:default-value ("-Wa,-gdwarf-2")) nil [27757 27788])
            ("dwarf-version-" function (:arguments ("=" "4")) nil [27844 27891])
            ("dwarf-version-" function (:arguments ("=" "5")) nil [27891 27938])
            ("DEBUG_CFLAGS" variable (:default-value ("-gdwarf-$(dwarf-version-y)")) nil [27938 27981])
            ("DEBUG_CFLAGS" variable (:default-value ("-fno-var-tracking")) nil [28020 28054])
            ("DEBUG_CFLAGS" variable (:default-value ("-femit-struct-debug-baseonly")) nil [28077 28122])
            ("DEBUG_CFLAGS" variable (:default-value ("-gz=zlib")) nil [28170 28195])
            ("KBUILD_AFLAGS" variable (:default-value ("-gz=zlib")) nil [28195 28221])
            ("KBUILD_LDFLAGS" variable (:default-value ("--compress-debug-sections=zlib")) nil [28221 28270])
            ("KBUILD_CFLAGS" variable (:default-value ("$(DEBUG_CFLAGS)")) nil [28304 28337])
            ("KBUILD_CFLAGS" variable (:default-value ("$(CC_FLAGS_FTRACE)" "$(CC_FLAGS_USING)")) nil [29124 29178])
            ("KBUILD_AFLAGS" variable (:default-value ("$(CC_FLAGS_USING)")) nil [29178 29213])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-inline-functions-called-once")) nil [29310 29361])
            ("KBUILD_CFLAGS_KERNEL" variable (:default-value ("-ffunction-sections" "-fdata-sections")) nil [29411 29471])
            ("LDFLAGS_vmlinux" variable (:default-value ("--gc-sections")) nil [29471 29504])
            ("CC_FLAGS_SCS" variable (:default-value ("-fsanitize=shadow-call-stack")) nil [29542 29587])
            ("KBUILD_CFLAGS" variable (:default-value ("$(CC_FLAGS_SCS)")) nil [29587 29620])
            ("CC_FLAGS_LTO" variable (:default-value ("-flto=thin" "-fsplit-lto-unit")) nil [29698 29742])
            ("KBUILD_LDFLAGS" variable (:default-value ("--thinlto-cache-dir=$(extmod_prefix).thinlto-cache")) nil [29742 29811])
            ("CC_FLAGS_LTO" variable (:default-value ("-flto")) nil [29816 29838])
            ("CC_FLAGS_LTO" variable (:default-value ("-fvisibility=hidden")) nil [29844 29880])
            ("KBUILD_LDFLAGS" variable (:default-value ("-mllvm" "-import-instr-limit=5")) nil [29945 29992])
            ("KBUILD_LDFLAGS" variable (:default-value ("-plugin-opt=-warn-stack-size=$(CONFIG_FRAME_WARN)")) nil [30191 30259])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-lto" "$(CC_FLAGS_LTO)")) nil [30295 30337])
            ("KBUILD_AFLAGS" variable (:default-value ("-fno-lto")) nil [30337 30363])
            ("CC_FLAGS_CFI" variable (:default-value ("-fsanitize=cfi" "-fsanitize-cfi-cross-dso" "-fno-sanitize-cfi-canonical-jump-tables" "-fno-sanitize-trap=cfi" "-fno-sanitize-blacklist")) nil [30413 30584])
            ("CC_FLAGS_CFI" variable (:default-value ("-fsanitize-recover=cfi")) nil [30613 30652])
            ("CC_FLAGS_LTO" variable (:default-value ("$(CC_FLAGS_CFI)")) nil [30721 30753])
            ("KBUILD_CFLAGS" variable (:default-value ("$(CC_FLAGS_CFI)")) nil [30753 30786])
            ("KBUILD_CFLAGS" variable (:default-value ("-falign-functions=64")) nil [30857 30895])
            ("NOSTDINC_FLAGS" variable (:default-value ("-nostdinc" "-isystem" "$(shell $(CC) -print-file-name=include)")) nil [30979 31056])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wdeclaration-after-statement")) nil [31102 31149])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wvla")) nil [31224 31247])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wno-pointer-sign")) nil [31304 31339])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, stringop-truncation)")) nil [31378 31443])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, zero-length-bounds)")) nil [31525 31589])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wno-array-bounds")) nil [31589 31624])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, stringop-overflow)")) nil [31624 31687])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, restrict)")) nil [31748 31802])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wno-maybe-uninitialized")) nil [31875 31917])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-strict-overflow")) nil [31991 32029])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-stack-check")) nil [32099 32134])
            ("KBUILD_CFLAGS" variable (:default-value ("-fconserve-stack")) nil [32188 32224])
            ("KBUILD_CFLAGS" variable (:default-value ("-Werror=date-time")) nil [32305 32342])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Werror=incompatible-pointer-types)")) nil [32375 32447])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Werror=designated-init)")) nil [32508 32569])
            ("KBUILD_CPPFLAGS" variable (:default-value ("$(call cc-option,-fmacro-prefix-map=$(srctree)/=)")) nil [32626 32695])
            ("include-y" variable (:default-value ("scripts/Makefile.extrawarn")) nil [32739 32781])
            ("$(addprefix $(srctree)/, $(include-y))" include nil nil [33046 33093])
            ("KBUILD_CPPFLAGS" variable (:default-value ("$(KCPPFLAGS)")) nil [33382 33414])
            ("KBUILD_AFLAGS" variable (:default-value ("$(KAFLAGS)")) nil [33414 33444])
            ("KBUILD_CFLAGS" variable (:default-value ("$(KCFLAGS)")) nil [33444 33474])
            ("KBUILD_LDFLAGS_MODULE" variable (:default-value ("--build-id=sha1")) nil [33475 33516])
            ("LDFLAGS_vmlinux" variable (:default-value ("--build-id=sha1")) nil [33516 33551])
            ("LDFLAGS_vmlinux" variable (:default-value ("$(call ld-option, -X,)")) nil [33586 33628])
            ("LDFLAGS_vmlinux" variable (:default-value ("--pack-dyn-relocs=relr" "--use-android-relr-tags")) nil [33659 33725])
            ("LDFLAGS_vmlinux" variable (:default-value ("--orphan-handling=warn")) nil [33900 33942])
            ("KBUILD_USERCFLAGS" variable (:default-value ("$(filter -m32 -m64 --target=%, $(KBUILD_CFLAGS))")) nil [34008 34079])
            ("KBUILD_USERLDFLAGS" variable (:default-value ("$(filter -m32 -m64 --target=%, $(KBUILD_CFLAGS))")) nil [34079 34150])
            ("CHECKFLAGS" variable (:default-value ("--arch=$(ARCH)")) nil [34202 34231])
            ("CHECKFLAGS" variable (:default-value ("$(if $(CONFIG_CPU_BIG_ENDIAN),-mbig-endian,-mlittle-endian)")) nil [34283 34357])
            ("CHECKFLAGS" variable (:default-value ("$(if $(CONFIG_64BIT),-m64,-m32)")) nil [34403 34449])
            ("MODLIB" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)")) nil [35394 35452])
            ("PHONY" variable (:default-value ("prepare0")) nil [35467 35485])
            ("MODORDER" function (:arguments ("=" "$(extmod_prefix)modules.order")) nil [35550 35599])
            ("export" function (:arguments ("=" "$(extmod_prefix)modules.order")) nil [35550 35599])
            ("MODULES_NSDEPS" function (:arguments ("=" "$(extmod_prefix)modules.nsdeps")) nil [35599 35655])
            ("export" function (:arguments ("=" "$(extmod_prefix)modules.nsdeps")) nil [35599 35655])
            ("core-y" variable (:default-value ("kernel/" "certs/" "mm/" "fs/" "ipc/" "security/" "crypto/" "block/")) nil [35681 35745])
            ("vmlinux-dirs" variable (:default-value ("$(patsubst %/,%,$(filter %/, \\
		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \\
		     $(libs-y) $(libs-m)))")) nil [35746 35877])
            ("vmlinux-alldirs" variable (:default-value ("$(sort $(vmlinux-dirs) Documentation \\
		     $(patsubst %/,%,$(filter %/, $(core-) \\
			$(drivers-) $(libs-))))")) nil [35878 36010])
            ("subdir-modorder" variable (:default-value ("$(addsuffix modules.order,$(filter %/, \\
			$(core-y) $(core-m) $(libs-y) $(libs-m) \\
			$(drivers-y) $(drivers-m)))")) nil [36011 36147])
            ("build-dirs" variable (:default-value ("$(vmlinux-dirs)")) nil [36148 36178])
            ("clean-dirs" variable (:default-value ("$(vmlinux-alldirs)")) nil [36178 36211])
            ("KBUILD_VMLINUX_OBJS" variable (:default-value ("$(head-y)" "$(patsubst %/,%/built-in.a, $(core-y))")) nil [36267 36339])
            ("KBUILD_VMLINUX_OBJS" variable (:default-value ("$(addsuffix built-in.a, $(filter %/, $(libs-y)))")) nil [36339 36411])
            ("KBUILD_VMLINUX_OBJS" variable (:default-value ("$(patsubst %/, %/lib.a, $(filter %/, $(libs-y)))")) nil [36432 36504])
            ("KBUILD_VMLINUX_LIBS" variable (:default-value ("$(filter-out %/, $(libs-y))")) nil [36504 36555])
            ("KBUILD_VMLINUX_LIBS" variable (:default-value ("$(patsubst %/,%/lib.a, $(libs-y))")) nil [36560 36617])
            ("KBUILD_VMLINUX_OBJS" variable (:default-value ("$(patsubst %/,%/built-in.a, $(drivers-y))")) nil [36623 36688])
            ("KBUILD_LDS" function (:arguments ("=" "arch/$(SRCARCH)/kernel/vmlinux.lds")) nil [36736 36801])
            ("export" function (:arguments ("=" "arch/$(SRCARCH)/kernel/vmlinux.lds")) nil [36736 36801])
            ("KBUILD_ALLDIRS" function (:arguments ("=" "$(sort $(filter-out arch/%,$(vmlinux-alldirs)) LICENSES arch include scripts tools)")) nil [36836 36945])
            ("export" function (:arguments ("=" "$(sort $(filter-out arch/%,$(vmlinux-alldirs)) LICENSES arch include scripts tools)")) nil [36836 36945])
            ("vmlinux-deps" variable (:default-value ("$(KBUILD_LDS)" "$(KBUILD_VMLINUX_OBJS)" "$(KBUILD_VMLINUX_LIBS)")) nil [36946 37022])
            ("PHONY" variable (:default-value ("autoksyms_recursive")) nil [37072 37101])
            ("KBUILD_MODULES" variable (:default-value ("1")) nil [37354 37374])
            ("autoksyms_recursive" function (:arguments ("descend" "modules.order")) nil [37375 37524])
            ("autoksyms_h" variable (:default-value ("$(if $(CONFIG_TRIM_UNUSED_KSYMS), include/generated/autoksyms.h)")) nil [37531 37611])
            ("quiet_cmd_autoksyms_h" variable (:default-value ("GEN" "$@")) nil [37612 37647])
            ("$(autoksyms_h)" function nil nil [37752 37793])
            ("ARCH_POSTLINK" variable (:default-value ("$(wildcard $(srctree)/arch/$(SRCARCH)/Makefile.postlink)")) nil [37794 37868])
            ("cmd_link-vmlinux" variable (:default-value ("$(CONFIG_SHELL)" "$<" "\"$(LD)\"" "\"$(KBUILD_LDFLAGS)\"" "\"$(LDFLAGS_vmlinux)\";" "$(if $(ARCH_POSTLINK), $(MAKE) -f $(ARCH_POSTLINK) $@, true)")) nil [37934 38140])
            ("vmlinux" function (:arguments ("scripts/link-vmlinux.sh" "autoksyms_recursive" "$(vmlinux-deps)" "FORCE")) nil [38141 38254])
            ("targets" variable (:default-value ("vmlinux")) nil [38255 38274])
            ("$(sort $(vmlinux-deps) $(subdir-modorder))" function (:arguments ("descend" ";")) nil [38365 38419])
            ("filechk_kernel.release" variable (:default-value ("echo" "\"$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree))\"")) nil [38420 38537])
            ("include/config/kernel.release" function (:arguments ("FORCE")) nil [38606 38675])
            ("PHONY" variable (:default-value ("scripts")) nil [38799 38816])
            ("scripts" function (:arguments ("scripts_basic" "scripts_dtc")) nil [38816 38878])
            ("PHONY" variable (:default-value ("prepare" "archprepare")) nil [39194 39223])
            ("archprepare" function (:arguments ("outputmakefile" "archheaders" "archscripts" "scripts" "include/config/kernel.release" "asm-generic" "$(version_h)" "$(autoksyms_h)" "include/generated/utsrelease.h" "include/generated/autoconf.h" "remove-stale-files")) nil [39224 39439])
            ("prepare0" function (:arguments ("archprepare")) nil [39440 39520])
            ("prepare" function (:arguments ("prepare0")) nil [39543 39561])
            ("PHONY" variable (:default-value ("remove-stale-files")) nil [39562 39590])
            ("remove-stale-files" function nil nil [39590 39653])
            ("asm-generic" variable (:default-value ("-f" "$(srctree)/scripts/Makefile.asm-generic" "obj")) nil [39705 39767])
            ("PHONY" variable (:default-value ("asm-generic" "uapi-asm-generic")) nil [39768 39806])
            ("asm-generic" function (:arguments ("uapi-asm-generic")) nil [39806 39933])
            ("uapi-asm-generic" function nil nil [39933 40058])
            ("uts_len" variable (:default-value ("64")) nil [40296 40310])
            ("$(version_h)" function (:arguments ("PATCHLEVEL" ":=" "$(if $(PATCHLEVEL), $(PATCHLEVEL), 0)")) nil [41477 41543])
            ("$(version_h)" function (:arguments ("SUBLEVEL" ":=" "$(if $(SUBLEVEL), $(SUBLEVEL), 0)")) nil [41543 41603])
            ("$(version_h)" function (:arguments ("FORCE")) nil [41603 41650])
            ("include/generated/utsrelease.h" function (:arguments ("include/config/kernel.release" "FORCE")) nil [41651 41749])
            ("PHONY" variable (:default-value ("headerdep")) nil [41750 41769])
            ("headerdep" function nil nil [41769 41899])
            ("quiet_cmd_headers_install" variable (:default-value ("INSTALL" "$(INSTALL_HDR_PATH)/include")) nil [42078 42142])
            ("PHONY" variable (:default-value ("headers_install")) nil [42299 42324])
            ("headers_install" function (:arguments ("headers")) nil [42324 42378])
            ("PHONY" variable (:default-value ("archheaders" "archscripts")) nil [42379 42412])
            ("hdr-inst" variable (:default-value ("-f" "$(srctree)/scripts/Makefile.headersinst" "obj")) nil [42413 42472])
            ("PHONY" variable (:default-value ("headers")) nil [42473 42490])
            ("headers" function (:arguments ("$(version_h)" "scripts_unifdef" "uapi-asm-generic" "archheaders" "archscripts")) nil [42490 42802])
            ("PHONY" variable (:default-value ("headers_check")) nil [42834 42857])
            ("headers_check" function nil nil [42857 43174])
            ("prepare" function (:arguments ("headers")) nil [43204 43221])
            ("PHONY" variable (:default-value ("scripts_unifdef")) nil [43228 43253])
            ("scripts_unifdef" function (:arguments ("scripts_basic")) nil [43253 43330])
            ("install" function (:arguments ("sub_make_done" ":=")) nil [43697 43723])
            ("prepare" function (:arguments ("tools/objtool")) nil [43841 43864])
            ("prepare" function (:arguments ("tools/bpf/resolve_btfids")) nil [43916 43950])
            ("PHONY" variable (:default-value ("resolve_btfids_clean")) nil [43963 43993])
            ("resolve_btfids_O" variable (:default-value ("$(abspath $(objtree))/tools/bpf/resolve_btfids")) nil [43994 44060])
            ("resolve_btfids_clean" function nil nil [44165 44187])
            ("tools_silent" variable (:default-value ("s")) nil [44398 44413])
            ("tools/" function (:arguments ("FORCE")) nil [44420 44604])
            ("tools/%" function (:arguments ("FORCE")) nil [44605 44793])
            ("PHONY" variable (:default-value ("kselftest")) nil [44891 44910])
            ("kselftest" function nil nil [44910 44982])
            ("kselftest-%" function (:arguments ("FORCE")) nil [44983 45056])
            ("PHONY" variable (:default-value ("kselftest-merge")) nil [45057 45082])
            ("kselftest-merge" function nil nil [45082 45377])
            ("dtstree" variable (:default-value ("arch/$(SRCARCH)/boot/dts")) nil [45534 45570])
            ("%.dtb" function (:arguments ("include/config/kernel.release" "scripts_dtc")) nil [45598 45694])
            ("%.dtbo" function (:arguments ("include/config/kernel.release" "scripts_dtc")) nil [45695 45792])
            ("PHONY" variable (:default-value ("dtbs" "dtbs_install" "dtbs_check")) nil [45793 45831])
            ("dtbs" function (:arguments ("include/config/kernel.release" "scripts_dtc")) nil [45831 45912])
            ("dtbs" function (:arguments ("dt_binding_check")) nil [45980 46003])
            ("dtbs_check" function (:arguments ("dtbs")) nil [46010 46027])
            ("dtbs_install" function nil nil [46028 46102])
            ("all" function (:arguments ("dtbs")) nil [46134 46144])
            ("PHONY" variable (:default-value ("scripts_dtc")) nil [46158 46179])
            ("scripts_dtc" function (:arguments ("scripts_basic")) nil [46179 46240])
            ("PHONY" variable (:default-value ("dt_binding_check")) nil [46327 46353])
            ("dt_binding_check" function (:arguments ("scripts_dtc")) nil [46353 46439])
            ("all" function (:arguments ("modules")) nil [46588 46601])
            ("PHONY" variable (:default-value ("modules")) nil [47044 47061])
            ("modules" function (:arguments ("$(if $(KBUILD_BUILTIN),vmlinux)" "modules_check" "modules_prepare")) nil [47061 47132])
            ("cmd_modules_order" variable (:default-value ("$(AWK)" "'!x[$$0]++'" "$(real-prereqs)" ">" "$@")) nil [47133 47193])
            ("modules.order" function (:arguments ("$(subdir-modorder)" "FORCE")) nil [47194 47268])
            ("targets" variable (:default-value ("modules.order")) nil [47269 47294])
            ("PHONY" variable (:default-value ("modules_prepare")) nil [47341 47366])
            ("modules_prepare" function (:arguments ("prepare")) nil [47366 47440])
            ("modules_sign_only" function (:arguments ("=")) nil [47441 47469])
            ("export" function (:arguments ("=")) nil [47441 47469])
            ("PHONY" variable (:default-value ("modules_sign")) nil [47500 47522])
            ("modules_sign" function (:arguments ("modules_install")) nil [47522 47556])
            ("modules_sign_only" variable (:default-value ("y")) nil [47733 47756])
            ("modinst_pre" variable nil nil [47769 47784])
            ("modinst_pre" variable (:default-value ("__modinst_pre")) nil [47835 47864])
            ("modules_install" function (:arguments ("$(modinst_pre)")) nil [47871 47903])
            ("PHONY" variable (:default-value ("__modinst_pre")) nil [47903 47926])
            ("__modinst_pre" function nil nil [47926 48338])
            ("CLEAN_FILES" variable (:default-value ("include/ksym" "vmlinux.symvers" "modules-only.symvers" "modules.builtin" "modules.builtin.modinfo" "modules.nsdeps" "compile_commands.json" ".thinlto-cache")) nil [48707 48884])
            ("MRPROPER_FILES" variable (:default-value ("include/config" "include/generated" "arch/$(SRCARCH)/include/generated" ".tmp_objdiff" "debian" "snap" "tar-install" ".config" ".config.old" ".version" "Module.symvers" "certs/signing_key.pem" "certs/signing_key.x509" "certs/x509.genkey" "vmlinux-gdb.py" "*.spec")) nil [48936 49244])
            ("clean" function (:arguments ("rm-files" ":=" "$(CLEAN_FILES)")) nil [49313 49347])
            ("PHONY" variable (:default-value ("archclean" "vmlinuxclean")) nil [49348 49380])
            ("vmlinuxclean" function nil nil [49381 49520])
            ("clean" function (:arguments ("archclean" "vmlinuxclean" "resolve_btfids_clean")) nil [49521 49572])
            ("mrproper" function (:arguments ("rm-files" ":=" "$(wildcard $(MRPROPER_FILES))")) nil [49634 49686])
            ("mrproper-dirs" variable (:default-value ("$(addprefix _mrproper_,scripts)")) nil [49686 49740])
            ("PHONY" variable (:default-value ("$(mrproper-dirs)" "mrproper")) nil [49741 49776])
            ("$(mrproper-dirs)" function nil nil [49776 49845])
            ("mrproper" function (:arguments ("clean" "$(mrproper-dirs)")) nil [49846 49900])
            ("PHONY" variable (:default-value ("distclean")) nil [49915 49934])
            ("distclean" function (:arguments ("mrproper")) nil [49935 50254])
            ("%src-pkg" function (:arguments ("FORCE")) nil [50380 50451])
            ("%pkg" function (:arguments ("include/config/kernel.release" "FORCE")) nil [50451 50548])
            ("boards" variable (:default-value ("$(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)")) nil [50678 50747])
            ("boards" variable (:default-value ("$(sort $(notdir $(boards)))")) nil [50747 50785])
            ("board-dirs" variable (:default-value ("$(dir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*/*_defconfig))")) nil [50785 50867])
            ("board-dirs" variable (:default-value ("$(sort $(notdir $(board-dirs:/=)))")) nil [50867 50916])
            ("PHONY" variable (:default-value ("help")) nil [50917 50931])
            ("help" function nil nil [50931 54343])
            ("help-board-dirs" variable (:default-value ("$(addprefix help-,$(board-dirs))")) nil [56149 56201])
            ("help-boards" function (:arguments ("$(help-board-dirs)")) nil [56202 56234])
            ("boards-per-dir" variable (:default-value ("$(sort $(notdir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/$*/*_defconfig)))")) nil [56235 56332])
            ("$(help-board-dirs)" function (:arguments ("help-%:")) nil [56333 56568])
            ("DOC_TARGETS" variable (:default-value ("xmldocs" "latexdocs" "pdfdocs" "htmldocs" "epubdocs" "cleandocs" "linkcheckdocs" "dochelp" "refcheckdocs")) nil [56672 56786])
            ("PHONY" variable (:default-value ("$(DOC_TARGETS)")) nil [56786 56810])
            ("$(DOC_TARGETS)" function nil nil [56810 56865])
            ("PHONY" variable (:default-value ("scripts_gdb")) nil [56952 56973])
            ("scripts_gdb" function (:arguments ("prepare0")) nil [56973 57091])
            ("all" function (:arguments ("scripts_gdb")) nil [57117 57134])
            ("KBUILD_BUILTIN" variable nil nil [57508 57526])
            ("KBUILD_MODULES" variable (:default-value ("1")) nil [57526 57546])
            ("build-dirs" variable (:default-value ("$(KBUILD_EXTMOD)")) nil [57547 57578])
            ("$(MODORDER)" function (:arguments ("descend")) nil [57578 57603])
            ("compile_commands.json" function (:arguments ("$(extmod_prefix)compile_commands.json")) nil [57604 57665])
            ("PHONY" variable (:default-value ("compile_commands.json")) nil [57665 57696])
            ("clean-dirs" variable (:default-value ("$(KBUILD_EXTMOD)")) nil [57697 57728])
            ("clean" function (:arguments ("rm-files" ":=" "$(KBUILD_EXTMOD)/Module.symvers" "$(KBUILD_EXTMOD)/modules.nsdeps" "$(KBUILD_EXTMOD)/compile_commands.json" "$(KBUILD_EXTMOD)/.thinlto-cache")) nil [57728 57885])
            ("PHONY" variable (:default-value ("prepare")) nil [57886 57903])
            ("prepare" function (:arguments ("CC_VERSION_TEXT" ":=" "$(CC_VERSION_TEXT)")) nil [57984 58031])
            ("prepare" function nil nil [58031 58326])
            ("PHONY" variable (:default-value ("help")) nil [58327 58341])
            ("help" function nil nil [58341 58663])
            ("PHONY" variable (:default-value ("modules_prepare")) nil [58699 58724])
            ("PHONY" variable (:default-value ("modules" "modules_install")) nil [58837 58870])
            ("modules" function (:arguments ("modules_check")) nil [58893 58968])
            ("PHONY" variable (:default-value ("modules_check")) nil [58969 58992])
            ("modules_check" function (:arguments ("$(MODORDER)")) nil [58992 59079])
            ("quiet_cmd_depmod" variable (:default-value ("DEPMOD" "$(MODLIB)")) nil [59080 59117])
            ("modules_install" function nil nil [59230 59319])
            ("modules_install" function nil nil [59447 59708])
            ("modules" function nil nil [59447 59708])
            ("single-ko" variable (:default-value ("$(sort $(filter %.ko, $(MAKECMDGOALS)))")) nil [60157 60210])
            ("single-no-ko" variable (:default-value ("$(sort $(patsubst %.ko,%.mod, $(MAKECMDGOALS)))")) nil [60210 60274])
            ("$(single-ko)" function (:arguments ("single_modpost")) nil [60275 60308])
            ("$(single-no-ko)" function (:arguments ("descend")) nil [60308 60337])
            ("MODORDER" variable (:default-value (".modules.tmp")) nil [60508 60533])
            ("PHONY" variable (:default-value ("single_modpost")) nil [60540 60564])
            ("single_modpost" function (:arguments ("$(single-no-ko)" "modules_prepare")) nil [60564 60740])
            ("KBUILD_MODULES" variable (:default-value ("1")) nil [60741 60761])
            ("KBUILD_SINGLE_TARGETS" function (:arguments ("=" "$(addprefix $(extmod_prefix), $(single-no-ko))")) nil [60762 60841])
            ("export" function (:arguments ("=" "$(addprefix $(extmod_prefix), $(single-no-ko))")) nil [60762 60841])
            ("build-dirs" variable (:default-value ("$(foreach d, $(build-dirs), \\
			$(if $(filter $(d)/%, $(KBUILD_SINGLE_TARGETS)), $(d)))")) nil [60871 60974])
            ("KBUILD_MODULES" variable nil nil [61004 61022])
            ("PHONY" variable (:default-value ("descend" "$(build-dirs)")) nil [61310 61341])
            ("descend" function (:arguments ("$(build-dirs)")) nil [61341 61364])
            ("$(build-dirs)" function (:arguments ("prepare")) nil [61364 61530])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_, $(clean-dirs))")) nil [61531 61581])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean")) nil [61581 61610])
            ("$(clean-dirs)" function nil nil [61610 61673])
            ("clean" function (:arguments ("$(clean-dirs)")) nil [61674 62359])
            ("quiet_cmd_tags" variable (:default-value ("GEN" "$@")) nil [62466 62494])
            ("TAGS" function (:arguments ("FORCE")) nil [62550 62598])
            ("tags" function (:arguments ("FORCE")) nil [62550 62598])
            ("PHONY" variable (:default-value ("nsdeps")) nil [62730 62746])
            ("nsdeps" function (:arguments ("export" "KBUILD_NSDEPS=1")) nil [62746 62777])
            ("nsdeps" function (:arguments ("modules")) nil [62777 62840])
            ("quiet_cmd_gen_compile_commands" variable (:default-value ("GEN" "$@")) nil [62936 62980])
            ("$(extmod_prefix)" function (:arguments ("scripts/clang-tools/gen_compile_commands.py" "$(if $(KBUILD_EXTMOD),,$(KBUILD_VMLINUX_OBJS) $(KBUILD_VMLINUX_LIBS))" "$(if $(CONFIG_MODULES), $(MODORDER))" "FORCE")) nil [63077 63320])
            ("targets" variable (:default-value ("$(extmod_prefix)compile_commands.json")) nil [63321 63370])
            ("PHONY" variable (:default-value ("clang-tidy" "clang-analyzer")) nil [63371 63406])
            ("quiet_cmd_clang_tools" variable (:default-value ("CHECK" "$<")) nil [63432 63467])
            ("clang-analyzer" function (:arguments ("$(extmod_prefix)compile_commands.json")) nil [63559 63649])
            ("clang-tidy" function (:arguments ("$(extmod_prefix)compile_commands.json")) nil [63559 63649])
            ("clang-analyzer" function nil nil [63654 63723])
            ("clang-tidy" function nil nil [63654 63723])
            ("PHONY" variable (:default-value ("includecheck" "versioncheck" "coccicheck" "export_report")) nil [63859 63919])
            ("includecheck" function nil nil [63920 64073])
            ("versioncheck" function nil nil [64074 64226])
            ("coccicheck" function nil nil [64227 64274])
            ("export_report" function nil nil [64275 64335])
            ("PHONY" variable (:default-value ("checkstack" "kernelrelease" "kernelversion" "image_name")) nil [64336 64395])
            ("CHECKSTACK_ARCH" variable (:default-value ("$(SUBARCH)")) nil [64662 64692])
            ("CHECKSTACK_ARCH" variable (:default-value ("$(ARCH)")) nil [64697 64724])
            ("checkstack" function nil nil [64730 64854])
            ("kernelrelease" function nil nil [64855 64961])
            ("kernelversion" function nil nil [64962 65001])
            ("image_name" function nil nil [65002 65037])
            ("quiet_cmd_rmfiles" variable (:default-value ("$(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))")) nil [65038 65120])
            ("existing-targets" variable (:default-value ("$(wildcard $(sort $(targets)))")) nil [65208 65259])
            ("PHONY" variable (:default-value ("FORCE")) nil [65398 65413])
            ("FORCE" function nil nil [65413 65420]))          
      :file "Makefile"
      :pointmax 65579
      :fsize 65578
      :lastmodtime '(25008 26409 0 0)
      :unmatched-syntax '((semantic-list 65571 . 65578) (punctuation 65570 . 65571) (punctuation 65568 . 65569) (symbol 65562 . 65568) (bol 65562 . 65562) (ENDIF 65375 . 65380) (bol 65375 . 65375) (ENDIF 65355 . 65360) (bol 65355 . 65355) (ENDIF 65334 . 65339) (bol 65334 . 65334) (semantic-list 65270 . 65332) (punctuation 65269 . 65270) (symbol 65260 . 65268) (bol 65260 . 65260) (semantic-list 65148 . 65158) (punctuation 65147 . 65148) (symbol 65143 . 65146) (symbol 65140 . 65142) (punctuation 65138 . 65139) (symbol 65126 . 65137) (bol 65120 . 65120) (symbol 63556 . 63557) (punctuation 63555 . 63556) (punctuation 63553 . 63554) (punctuation 63552 . 63553) (symbol 63512 . 63551) (semantic-list 63503 . 63512) (punctuation 63502 . 63503) (semantic-list 63492 . 63501) (punctuation 63491 . 63492) (punctuation 63489 . 63490) (symbol 63473 . 63488) (bol 63467 . 63467) (semantic-list 63043 . 63075) (punctuation 63042 . 63043) (punctuation 63040 . 63041) (punctuation 63039 . 63040) (symbol 63036 . 63038) (semantic-list 63031 . 63035) (punctuation 63030 . 63031) (symbol 63027 . 63029) (symbol 63025 . 63026) (punctuation 63024 . 63025) (semantic-list 63014 . 63023) (punctuation 63013 . 63014) (punctuation 63011 . 63012) (symbol 62986 . 63010) (bol 62980 . 62980) (punctuation 62547 . 62548) (punctuation 62546 . 62547) (symbol 62529 . 62545) (semantic-list 62520 . 62529) (punctuation 62519 . 62520) (semantic-list 62512 . 62518) (punctuation 62511 . 62512) (punctuation 62509 . 62510) (symbol 62500 . 62508) (bol 62494 . 62494) (ENDIF 59709 . 59714) (bol 59709 . 59709) (ELSE 59320 . 59324) (bol 59320 . 59320) (semantic-list 59213 . 59228) (punctuation 59212 . 59213) (semantic-list 59182 . 59190) (punctuation 59181 . 59182) (symbol 59162 . 59180) (semantic-list 59153 . 59162) (punctuation 59152 . 59153) (semantic-list 59137 . 59151) (punctuation 59136 . 59137) (punctuation 59134 . 59135) (symbol 59123 . 59133) (bol 59117 . 59117) (ENDIF 58725 . 58730) (bol 58725 . 58725) (ELSE 57141 . 57145) (bol 57141 . 57141) (shell-command 56099 . 56146) (bol 56098 . 56098) (shell-command 56022 . 56097) (bol 56021 . 56021) (shell-command 56011 . 56020) (bol 56010 . 56010) (shell-command 55948 . 56009) (bol 55947 . 55947) (shell-command 55883 . 55946) (bol 55882 . 55882) (shell-command 55809 . 55881) (bol 55808 . 55808) (shell-command 55736 . 55807) (bol 55735 . 55735) (shell-command 55662 . 55734) (bol 55661 . 55661) (shell-command 55580 . 55660) (bol 55579 . 55579) (shell-command 55506 . 55578) (bol 55505 . 55505) (shell-command 55453 . 55504) (bol 55452 . 55452) (shell-command 55380 . 55451) (bol 55379 . 55379) (shell-command 55295 . 55378) (bol 55294 . 55294) (shell-command 55223 . 55293) (bol 55222 . 55222) (shell-command 55143 . 55221) (bol 55142 . 55142) (shell-command 54946 . 55140) (bol 54945 . 54945) (shell-command 54815 . 54944) (bol 54814 . 54814) (shell-command 54804 . 54813) (bol 54803 . 54803) (shell-command 54706 . 54802) (bol 54705 . 54705) (shell-command 54652 . 54704) (bol 54651 . 54651) (shell-command 54641 . 54650) (bol 54640 . 54640) (shell-command 54586 . 54639) (bol 54585 . 54585) (shell-command 54553 . 54584) (bol 54552 . 54552) (shell-command 54542 . 54551) (bol 54541 . 54541) (shell-command 54488 . 54540) (bol 54487 . 54487) (shell-command 54460 . 54486) (bol 54459 . 54459) (shell-command 54449 . 54458) (bol 54448 . 54448) (shell-command 54412 . 54447) (bol 54411 . 54411) (shell-command 54379 . 54410) (bol 54378 . 54378) (shell-command 54345 . 54377) (bol 54344 . 54344) (ENDIF 48339 . 48344) (bol 48339 . 48339) (symbol 46842 . 46843) (punctuation 46840 . 46841) (punctuation 46839 . 46840) (symbol 46824 . 46838) (bol 46822 . 46822) (symbol 46318 . 46319) (punctuation 46317 . 46318) (symbol 46301 . 46317) (symbol 46294 . 46300) (bol 46294 . 46294) (symbol 45978 . 45979) (punctuation 45977 . 45978) (symbol 45967 . 45977) (symbol 45960 . 45966) (bol 45960 . 45960) (shell-command 44229 . 44308) (bol 44228 . 44228) (semantic-list 42279 . 42297) (punctuation 42278 . 42279) (symbol 42266 . 42277) (string 42259 . 42262) (punctuation 42258 . 42259) (symbol 42249 . 42258) (string 42242 . 42248) (punctuation 42241 . 42242) (symbol 42232 . 42241) (string 42227 . 42231) (punctuation 42226 . 42227) (symbol 42217 . 42226) (symbol 42212 . 42216) (symbol 42206 . 42211) (punctuation 42201 . 42202) (semantic-list 42183 . 42201) (punctuation 42182 . 42183) (symbol 42179 . 42181) (symbol 42173 . 42178) (punctuation 42168 . 42169) (symbol 42148 . 42167) (bol 42142 . 42142) (symbol 42072 . 42076) (semantic-list 42063 . 42072) (punctuation 42062 . 42063) (punctuation 42060 . 42061) (symbol 42043 . 42059) (symbol 42036 . 42042) (bol 42036 . 42036) (symbol 41470 . 41475) (bol 41470 . 41470) (shell-command 40695 . 41469) (bol 40694 . 40694) (symbol 40676 . 40693) (symbol 40669 . 40675) (bol 40669 . 40669) (symbol 40662 . 40667) (bol 40662 . 40662) (shell-command 40339 . 40661) (bol 40338 . 40338) (symbol 40317 . 40337) (symbol 40310 . 40316) (bol 40310 . 40310) (punctuation 37749 . 37750) (punctuation 37748 . 37749) (symbol 37722 . 37747) (semantic-list 37713 . 37722) (punctuation 37712 . 37713) (semantic-list 37697 . 37711) (punctuation 37696 . 37697) (punctuation 37689 . 37690) (semantic-list 37681 . 37689) (punctuation 37680 . 37681) (symbol 37677 . 37679) (symbol 37671 . 37676) (punctuation 37669 . 37670) (symbol 37653 . 37668) (bol 37647 . 37647) (symbol 36716 . 36735) (symbol 36696 . 36715) (symbol 36689 . 36695) (bol 36689 . 36689) (semantic-list 35510 . 35549) (punctuation 35509 . 35510) (punctuation 35507 . 35508) (symbol 35493 . 35506) (symbol 35486 . 35492) (bol 35486 . 35486) (symbol 35459 . 35465) (symbol 35452 . 35458) (bol 35452 . 35452) (semantic-list 35175 . 35190) (punctuation 35174 . 35175) (symbol 35168 . 35174) (semantic-list 35154 . 35168) (punctuation 35153 . 35154) (punctuation 35151 . 35152) (punctuation 35150 . 35151) (symbol 35132 . 35149) (symbol 35125 . 35131) (bol 35125 . 35125) (symbol 34880 . 34885) (punctuation 34878 . 34879) (punctuation 34877 . 34878) (symbol 34864 . 34876) (symbol 34857 . 34863) (bol 34857 . 34857) (symbol 34709 . 34716) (punctuation 34707 . 34708) (punctuation 34706 . 34707) (symbol 34693 . 34705) (symbol 34686 . 34692) (bol 34686 . 34686) (symbol 33016 . 33044) (punctuation 33014 . 33015) (punctuation 33013 . 33014) (semantic-list 32992 . 33012) (punctuation 32991 . 32992) (symbol 32983 . 32991) (bol 32983 . 32983) (symbol 32961 . 32982) (punctuation 32959 . 32960) (punctuation 32958 . 32959) (semantic-list 32943 . 32956) (punctuation 32942 . 32943) (symbol 32934 . 32942) (bol 32934 . 32934) (symbol 32911 . 32933) (punctuation 32909 . 32910) (punctuation 32908 . 32909) (semantic-list 32892 . 32906) (punctuation 32891 . 32892) (symbol 32883 . 32891) (bol 32883 . 32883) (symbol 32860 . 32882) (punctuation 32858 . 32859) (punctuation 32857 . 32858) (semantic-list 32841 . 32855) (punctuation 32840 . 32841) (symbol 32832 . 32840) (bol 32832 . 32832) (symbol 32809 . 32831) (punctuation 32807 . 32808) (punctuation 32806 . 32807) (semantic-list 32790 . 32804) (punctuation 32789 . 32790) (symbol 32781 . 32789) (bol 32781 . 32781) (symbol 30793 . 30805) (symbol 30786 . 30792) (bol 30786 . 30786) (symbol 30370 . 30382) (symbol 30363 . 30369) (bol 30363 . 30363) (symbol 29627 . 29639) (symbol 29620 . 29626) (bol 29620 . 29620) (symbol 29108 . 29123) (symbol 29101 . 29107) (bol 29101 . 29101) (ENDIF 29089 . 29094) (bol 29087 . 29087) (symbol 29069 . 29086) (punctuation 29067 . 29068) (punctuation 29066 . 29067) (symbol 29051 . 29065) (bol 29047 . 29047) (symbol 29038 . 29046) (punctuation 29036 . 29037) (punctuation 29035 . 29036) (symbol 29019 . 29034) (bol 29015 . 29015) (semantic-list 28980 . 29014) (IFEQ 28975 . 28979) (bol 28973 . 28973) (bol 28912 . 28912) (ENDIF 28875 . 28880) (bol 28873 . 28873) (symbol 28852 . 28872) (symbol 28845 . 28851) (bol 28841 . 28841) (symbol 28839 . 28840) (punctuation 28837 . 28838) (punctuation 28836 . 28837) (symbol 28815 . 28835) (bol 28811 . 28811) (symbol 28784 . 28810) (IFDEF 28778 . 28783) (bol 28776 . 28776) (symbol 28704 . 28725) (punctuation 28702 . 28703) (punctuation 28701 . 28702) (symbol 28686 . 28700) (bol 28684 . 28684) (ENDIF 28633 . 28638) (bol 28631 . 28631) (ENDIF 28625 . 28630) (bol 28621 . 28621) (symbol 28599 . 28620) (punctuation 28597 . 28598) (punctuation 28596 . 28597) (symbol 28581 . 28595) (bol 28575 . 28575) (symbol 28562 . 28574) (punctuation 28560 . 28561) (punctuation 28559 . 28560) (symbol 28543 . 28558) (bol 28537 . 28537) (semantic-list 28498 . 28536) (IFEQ 28493 . 28497) (bol 28489 . 28489) (symbol 28466 . 28488) (IFDEF 28460 . 28465) (bol 28458 . 28458) (symbol 28442 . 28457) (punctuation 28440 . 28441) (punctuation 28439 . 28440) (symbol 28423 . 28438) (bol 28421 . 28421) (symbol 28344 . 28356) (symbol 28337 . 28343) (bol 28337 . 28337) (ENDIF 28277 . 28282) (bol 28277 . 28277) (symbol 25115 . 25122) (punctuation 25113 . 25114) (punctuation 25112 . 25113) (semantic-list 25096 . 25111) (punctuation 25095 . 25096) (symbol 25081 . 25095) (bol 25081 . 25081) (symbol 24021 . 24048) (IFDEF 24015 . 24020) (ELSE 24010 . 24014) (bol 24010 . 24010) (symbol 23951 . 23988) (IFDEF 23945 . 23950) (ELSE 23940 . 23944) (bol 23940 . 23940) (ENDIF 23554 . 23559) (bol 23554 . 23554) (ENDIF 23530 . 23535) (bol 23530 . 23530) (ELSE 22933 . 22937) (bol 22933 . 22933) (symbol 21607 . 21628) (symbol 21600 . 21606) (bol 21600 . 21600) (symbol 21583 . 21599) (symbol 21576 . 21582) (bol 21576 . 21576) (symbol 21224 . 21227) (punctuation 21222 . 21223) (punctuation 21221 . 21222) (symbol 21205 . 21220) (bol 21203 . 21203) (symbol 21081 . 21092) (symbol 21074 . 21080) (bol 21074 . 21074) (ENDIF 20698 . 20703) (bol 20698 . 20698) (symbol 20658 . 20662) (punctuation 20656 . 20657) (punctuation 20655 . 20656) (semantic-list 20642 . 20654) (punctuation 20641 . 20642) (symbol 20633 . 20641) (bol 20633 . 20633) (symbol 20624 . 20632) (punctuation 20622 . 20623) (punctuation 20621 . 20622) (semantic-list 20604 . 20620) (punctuation 20603 . 20604) (symbol 20595 . 20603) (bol 20595 . 20595) (symbol 20365 . 20379) (symbol 20350 . 20364) (symbol 20343 . 20349) (bol 20343 . 20343) (symbol 20334 . 20335) (punctuation 20332 . 20333) (punctuation 20331 . 20332) (symbol 20316 . 20330) (bol 20314 . 20314) (symbol 20281 . 20282) (punctuation 20279 . 20280) (punctuation 20278 . 20279) (symbol 20263 . 20277) (bol 20261 . 20261) (punctuation 20014 . 20015) (punctuation 20013 . 20014) (symbol 19998 . 20012) (bol 19996 . 19996) (ELSE 19350 . 19354) (bol 19350 . 19350) (symbol 19162 . 19177) (symbol 19147 . 19161) (symbol 19130 . 19146) (symbol 19123 . 19129) (bol 19123 . 19123) (symbol 17472 . 17480) (symbol 17470 . 17471) (semantic-list 17351 . 17469) (punctuation 17349 . 17350) (symbol 17336 . 17348) (bol 17330 . 17330) (symbol 16283 . 16303) (symbol 16262 . 16282) (symbol 16255 . 16261) (bol 16255 . 16255) (symbol 16233 . 16254) (symbol 16212 . 16232) (symbol 16191 . 16211) (symbol 16184 . 16190) (bol 16184 . 16184) (symbol 16170 . 16183) (symbol 16156 . 16169) (symbol 16142 . 16155) (symbol 16135 . 16141) (bol 16135 . 16135) (symbol 16121 . 16134) (symbol 16107 . 16120) (symbol 16093 . 16106) (symbol 16086 . 16092) (bol 16086 . 16086) (symbol 16071 . 16085) (symbol 16058 . 16070) (symbol 16045 . 16057) (symbol 16030 . 16044) (symbol 16014 . 16029) (symbol 16007 . 16013) (bol 16007 . 16007) (symbol 15991 . 16005) (symbol 15973 . 15990) (symbol 15954 . 15972) (symbol 15934 . 15953) (symbol 15927 . 15933) (bol 15927 . 15927) (symbol 15922 . 15926) (symbol 15919 . 15921) (symbol 15915 . 15918) (symbol 15910 . 15914) (symbol 15904 . 15909) (symbol 15897 . 15903) (symbol 15891 . 15896) (symbol 15884 . 15890) (bol 15884 . 15884) (symbol 15876 . 15883) (symbol 15864 . 15875) (symbol 15859 . 15863) (symbol 15848 . 15858) (symbol 15842 . 15847) (symbol 15834 . 15841) (symbol 15829 . 15833) (symbol 15822 . 15828) (bol 15822 . 15822) (symbol 15808 . 15821) (symbol 15804 . 15807) (symbol 15799 . 15803) (symbol 15795 . 15798) (symbol 15780 . 15794) (symbol 15773 . 15779) (symbol 15765 . 15772) (symbol 15757 . 15764) (symbol 15749 . 15756) (symbol 15743 . 15748) (symbol 15740 . 15742) (symbol 15737 . 15739) (symbol 15733 . 15736) (symbol 15726 . 15732) (bol 15726 . 15726) (symbol 15723 . 15725) (symbol 15720 . 15722) (symbol 15706 . 15719) (symbol 15688 . 15705) (symbol 15681 . 15687) (symbol 15676 . 15680) (symbol 15663 . 15675) (symbol 15655 . 15662) (symbol 15650 . 15654) (symbol 15643 . 15649) (bol 15643 . 15643) (symbol 12639 . 12653) (symbol 12632 . 12638) (bol 12632 . 12632) (symbol 12624 . 12631) (punctuation 12622 . 12623) (punctuation 12621 . 12622) (symbol 12606 . 12620) (bol 12606 . 12606) (symbol 12508 . 12514) (punctuation 12506 . 12507) (punctuation 12505 . 12506) (symbol 12497 . 12504) (bol 12490 . 12490) (symbol 12415 . 12420) (punctuation 12413 . 12414) (punctuation 12412 . 12413) (symbol 12404 . 12411) (bol 12397 . 12397) (symbol 12362 . 12367) (punctuation 12360 . 12361) (punctuation 12359 . 12360) (symbol 12351 . 12358) (bol 12344 . 12344) (symbol 12273 . 12276) (punctuation 12271 . 12272) (punctuation 12270 . 12271) (symbol 12262 . 12269) (bol 12254 . 12254) (symbol 12222 . 12225) (punctuation 12220 . 12221) (punctuation 12219 . 12220) (symbol 12211 . 12218) (bol 12203 . 12203) (semantic-list 12053 . 12062) (punctuation 12052 . 12053) (punctuation 12050 . 12051) (punctuation 12049 . 12050) (symbol 12043 . 12047) (bol 12043 . 12043) (symbol 11080 . 11093) (symbol 11066 . 11079) (symbol 11057 . 11065) (symbol 11046 . 11056) (symbol 11038 . 11045) (symbol 11031 . 11037) (bol 11031 . 11031) (ELSE 10718 . 10722) (bol 10718 . 10718) (ENDIF 10319 . 10324) (bol 10311 . 10311) (shell-command 10293 . 10310) (bol 10292 . 10292) (semantic-list 10247 . 10291) (IFNEQ 10241 . 10246) (bol 10233 . 10233) (ENDIF 10113 . 10118) (bol 10105 . 10105) (shell-command 10087 . 10104) (bol 10086 . 10086) (semantic-list 10036 . 10085) (IFNEQ 10030 . 10035) (bol 10022 . 10022) (shell-command 9891 . 9896) (bol 9890 . 9890) (shell-command 9872 . 9889) (bol 9871 . 9871) (shell-command 9813 . 9870) (bol 9812 . 9812) (shell-command 9794 . 9811) (bol 9793 . 9793) (ENDIF 9661 . 9666) (bol 9653 . 9653) (ENDIF 9647 . 9652) (bol 9631 . 9631) (shell-command 9612 . 9630) (bol 9611 . 9611) (semantic-list 9582 . 9610) (IFNEQ 9576 . 9581) (bol 9560 . 9560) (shell-command 9541 . 9559) (bol 9540 . 9540) (semantic-list 9503 . 9539) (IFNEQ 9497 . 9502) (bol 9489 . 9489) (shell-command 9438 . 9456) (bol 9437 . 9437) (shell-command 9398 . 9403) (bol 9397 . 9397) (shell-command 9377 . 9396) (bol 9376 . 9376) (shell-command 9311 . 9375) (bol 9310 . 9310) (shell-command 9235 . 9240) (bol 9234 . 9234) (shell-command 9216 . 9233) (bol 9215 . 9215) (shell-command 9153 . 9214) (bol 9152 . 9152) (shell-command 9080 . 9085) (bol 9079 . 9079) (shell-command 9063 . 9078) (bol 9062 . 9062) (shell-command 8998 . 9061) (bol 8997 . 8997) (symbol 7598 . 7603) (symbol 7590 . 7597) (symbol 7582 . 7589) (symbol 7558 . 7581) (symbol 7551 . 7557) (bol 7551 . 7551) (shell-command 7415 . 7443) (bol 7414 . 7414) (ENDIF 7408 . 7413) (bol 7400 . 7400) (semantic-list 7386 . 7399) (punctuation 7385 . 7386) (punctuation 7383 . 7384) (punctuation 7382 . 7383) (symbol 7374 . 7381) (bol 7358 . 7358) (ELSE 7353 . 7357) (bol 7345 . 7345) (symbol 7342 . 7344) (punctuation 7340 . 7341) (punctuation 7339 . 7340) (symbol 7331 . 7338) (bol 7315 . 7315) (bol 7251 . 7251) (semantic-list 7211 . 7250) (IFEQ 7206 . 7210) (bol 7198 . 7198) (shell-command 7166 . 7192) (bol 7165 . 7165) (symbol 7163 . 7164) (punctuation 7161 . 7162) (punctuation 7160 . 7161) (symbol 7152 . 7159) (bol 7144 . 7144) (bol 7106 . 7106) (ENDIF 6734 . 6739) (bol 6734 . 6734) (ENDIF 6712 . 6717) (bol 6712 . 6712) (symbol 6376 . 6387) (symbol 6364 . 6375) (symbol 6357 . 6363) (bol 6357 . 6357) (semantic-list 5707 . 5763) (punctuation 5706 . 5707) (bol 5706 . 5706) (ENDIF 5349 . 5354) (bol 5349 . 5349) (semantic-list 5149 . 5239) (punctuation 5148 . 5149) (bol 5148 . 5148) (semantic-list 4880 . 4883) (punctuation 4879 . 4880) (punctuation 4877 . 4878) (punctuation 4876 . 4877) (symbol 4862 . 4875) (bol 4860 . 4860) (symbol 4117 . 4130) (symbol 4110 . 4116) (bol 4110 . 4110) (semantic-list 3886 . 3983) (punctuation 3885 . 3886) (bol 3885 . 3885) (semantic-list 3874 . 3877) (punctuation 3873 . 3874) (punctuation 3871 . 3872) (punctuation 3870 . 3871) (symbol 3856 . 3869) (bol 3854 . 3854) (symbol 3652 . 3667) (symbol 3645 . 3651) (bol 3645 . 3645) (symbol 3636 . 3637) (punctuation 3634 . 3635) (symbol 3618 . 3633) (bol 3616 . 3616) (semantic-list 3583 . 3586) (punctuation 3582 . 3583) (punctuation 3580 . 3581) (symbol 3564 . 3579) (bol 3562 . 3562) (symbol 3128 . 3142) (symbol 3126 . 3127) (symbol 3120 . 3125) (symbol 3113 . 3119) (bol 3113 . 3113) (symbol 3104 . 3105) (punctuation 3102 . 3103) (symbol 3087 . 3101) (bol 3085 . 3085) (symbol 3077 . 3084) (punctuation 3076 . 3077) (symbol 3071 . 3076) (bol 3069 . 3069) (punctuation 2924 . 2925) (punctuation 2922 . 2923) (symbol 2920 . 2921) (bol 2918 . 2918) (symbol 2911 . 2917) (punctuation 2910 . 2911) (symbol 2905 . 2910) (bol 2903 . 2903) (punctuation 2896 . 2897) (symbol 2894 . 2895) (bol 2892 . 2892) (punctuation 2890 . 2891) (symbol 2884 . 2889) (bol 2882 . 2882) (symbol 2846 . 2847) (punctuation 2844 . 2845) (symbol 2829 . 2843) (bol 2827 . 2827) (semantic-list 2795 . 2798) (punctuation 2794 . 2795) (punctuation 2792 . 2793) (symbol 2777 . 2791) (bol 2775 . 2775) (symbol 1613 . 1625) (symbol 1604 . 1612) (bol 1604 . 1604) (symbol 1547 . 1557) (symbol 1536 . 1546) (symbol 1529 . 1535) (bol 1529 . 1529) (symbol 1496 . 1502) (symbol 1487 . 1495) (bol 1487 . 1487) (semantic-list 357 . 458) (punctuation 356 . 357) (bol 356 . 356))))
  :file "!Users!howinye!linux-5.15.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
